# WGCNA 페키지를 로딩합니다.
library(WGCNA)
options(stringsAsFactors = FALSE);
enableWGCNAThreads()
# 이전 파트에서 저장한 파일을 불러옵니다.
lnames = load(file = "AD-01-datainput.RData");
# 이전 파트의 파일을 불러온 lnames 변수 실행
lnames
# Topology 분석을 위한 soft-thresholding power 선택
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Network topology analysis function 불러오기
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot 생성
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Topology 분석을 위한 soft-thresholding power 선택
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Network topology analysis function 불러오기
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot 생성
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab= "Soft Threshold (power)" ,ylab= "Scale Free Topology Model Fit, signed R^2" ,type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
# R^2 값을 0.9기준으로 cutoff 진행
abline(h= 0.90 ,col= "red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab= "Soft Threshold (power)" ,ylab= "Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softPower=16;
adjacency = adjacency(datExpr, power=softPower);
# Adjacency 결과를 topological overlap으로 변환
TOM=TOMsimilarity(adjacency);
dissTOM = 1-TOM
# hierarchical clustering function 불러오기
geneTree = hclust(as.dist(dissTOM), method = "average" );
# clustering 결과 plotting (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
     labels = FALSE, hang = 0.04);
# 참고 논문의 모듈당 최소 단백질 수 동일하게 적용
minModuleSize = 23;
# Dynamic tree cut 함수를 이용한 모듈 추출
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 4, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize);
table(dynamicMods)
# 숫자로 지정되어 있는 모듈의 이름을 각각 색으로 변경
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# dendrogram 밑에 모듈의 색깔 표시
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main ="Gene dendrogram and module colors")
# eigengenes 계산
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# eigengenes의 모듈간의 비유사성 계산
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
#결과 plot 형성
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "") 
MEDissThres = 0.07
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red" )
# merging 함수 적용
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic" ),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
#dev.off()
#modulecolor 이름을 재설정 합니다.
moduleColors= mergedColors
#Construct numberical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
save(MEs, moduleLabels, moduleColors, geneTree, file = "AD-02-module construction.RData" )
